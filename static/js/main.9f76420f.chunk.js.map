{"version":3,"sources":["components/Square/Square.jsx","components/Board/Board.jsx","pages/Game/Game.jsx","reportWebVitals.js","index.js"],"names":["Square","props","class","onClick","handleClick","index","style","border","value","Board","squares","map","square","i","Game","useState","Xturn","setXturn","Array","fill","setSquares","winner","lines","length","a","b","c","calculateWinner","includes","localSquares","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAUeA,MARf,SAAgBC,GACZ,OACI,wBAAQC,MAAM,YAAYC,QAAS,kBAAMF,EAAMG,YAAYH,EAAMI,QAAQC,MAAO,CAACC,OAAQ,kBAAzF,SACKN,EAAMO,SCIJC,MAPf,SAAeR,GAEX,OACIA,EAAMS,QAAQC,KAAI,SAACC,EAAQC,GAAT,OAAe,cAAC,EAAD,CAAgBR,MAAOQ,EAAGL,MAAOI,EAAQR,YAAaH,EAAMG,aAA/CS,O,MCyDvCC,MA1Df,WACE,MAA0BC,oBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAASG,MAAM,GAAGC,KAAK,OAArD,mBAAOT,EAAP,KAAgBU,EAAhB,KACMC,EAEN,SAAyBX,GAYvB,IAXA,IAAMY,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAT,EAAI,EAAGA,EAAIS,EAAMC,OAAQV,IAAK,CACrC,kBAAkBS,EAAMT,GAAxB,GAAOW,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAIhB,EAAQc,IAAMd,EAAQc,KAAOd,EAAQe,IAAMf,EAAQc,KAAOd,EAAQgB,GACpE,OAAOhB,EAAQc,GAGnB,OAAO,EApBMG,CAAgBjB,GA8C/B,OACI,sBAAKR,MAAM,qDAAX,UACE,qBAAKA,MAAM,uBAAX,SAAkC,4BAXnCmB,EACMA,EAAS,iBAETX,EAAQkB,SAAS,MAGnBZ,EAAQ,WAAa,WAFnB,YAQL,cAAC,EAAD,CAAON,QAASA,EAASN,YA1B/B,SAAqBS,GACnB,IAAGQ,GAGmB,MAAdX,EAAQG,GAAY,CAC1B,IAAIgB,EAAenB,EACnBmB,EAAahB,GAAKG,EAAQ,IAAM,IAChCI,EAAWS,GACXZ,GAAUD,WC1BDc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.9f76420f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button class=\"text-10xl\" onClick={() => props.handleClick(props.index)} style={{border: \"1x solid black\"}}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Square","import Square from \"../Square/Square\"\r\n\r\nfunction Board(props) {\r\n    //squares[1] = \"X\"\r\n    return (\r\n        props.squares.map((square, i) => <Square key={i} index={i} value={square} handleClick={props.handleClick}></Square>) // onClick={() => props.onClick(i)}\r\n    )\r\n}\r\n\r\nexport default Board","import React, { useState } from \"react\";\r\nimport Board from \"../../components/Board/Board\"\r\nimport \"./Game.css\";\r\n\r\nfunction Game() {\r\n  const [Xturn, setXturn] = useState(true)\r\n  const [squares, setSquares] = useState(Array(9).fill(null))\r\n  const winner = calculateWinner(squares)\r\n\r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function handleClick(i) {\r\n    if(winner) {\r\n      return // title screen TODO\r\n    }\r\n    else if(squares[i] == null) {\r\n      let localSquares = squares\r\n      localSquares[i] = Xturn ? \"X\" : \"O\"\r\n      setSquares(localSquares)\r\n      setXturn(!Xturn)\r\n\r\n    }\r\n  }\r\n\r\n  function setTitle() {\r\n    if(winner) {\r\n      return winner + \" won the game!\"\r\n    }\r\n    else if(!squares.includes(null)) {\r\n      return \"Draw!\"\r\n    }\r\n    return Xturn ? \"X's turn\" : \"O's turn\"\r\n  }\r\n\r\n  return (\r\n      <div class=\"grid grid-cols-3 grid-rows-4 min-h-screen text-5xl\">\r\n        <div class=\"gameTitle col-span-3\"><p>{setTitle()}</p></div>\r\n        <Board squares={squares} handleClick={handleClick} />\r\n\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './pages/Game/Game'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}